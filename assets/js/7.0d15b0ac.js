(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{372:function(t,a,s){t.exports=s.p+"assets/img/browser.433dbdf7.png"},428:function(t,a,s){t.exports=s.p+"assets/img/V8.2df0b057.png"},429:function(t,a,s){t.exports=s.p+"assets/img/call-stack.54c7a989.png"},430:function(t,a,s){t.exports=s.p+"assets/img/error-call-stack.fe9be013.png"},431:function(t,a,s){t.exports=s.p+"assets/img/blocking.9a66429d.png"},432:function(t,a,s){t.exports=s.p+"assets/img/event-loop.0dfbf74b.gif"},544:function(t,a,s){"use strict";s.r(a);var n=s(56),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"什么是事件循环-翻译"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是事件循环-翻译"}},[t._v("#")]),t._v(" 什么是事件循环（翻译）")]),t._v(" "),n("p",[t._v("来自 2014 JSConfEU")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.youtube.com/watch?v=8aGhZQkoFbQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("What the heck is the event loop anyway?(Philip Roberts)"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"javascript中的事件是如何工作的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript中的事件是如何工作的"}},[t._v("#")]),t._v(" JavaScript中的事件是如何工作的")]),t._v(" "),n("p",[t._v("对JS常见的解释是这样的：它是一个单线程、非阻塞、异步、解释性的脚本语言。它由调用栈、事件循环、回调队列和一些API等组成。")]),t._v(" "),n("h3",{attrs:{id:"浏览器引擎只包含堆和调用栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浏览器引擎只包含堆和调用栈"}},[t._v("#")]),t._v(" 浏览器引擎只包含堆和调用栈")]),t._v(" "),n("p",[t._v("V8引擎中有堆（Heap）和调用栈（Stack），没有其他的东西（事件循环、回调队列、APIS）")]),t._v(" "),n("p",[n("img",{attrs:{src:s(428),alt:"V8引擎包含内容"}})]),t._v(" "),n("p",[t._v("V8源码中搜索不到"),n("code",[t._v("DOM")]),t._v("、HTTP请求（"),n("code",[t._v("XMLHttpRequest")]),t._v("）相关的代码。")]),t._v(" "),n("p",[t._v("V8引擎提供运行环境，js运行所需其他由浏览器环境提供。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(372),alt:"浏览器包含内容"}})]),t._v(" "),n("h2",{attrs:{id:"回调栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#回调栈"}},[t._v("#")]),t._v(" 回调栈")]),t._v(" "),n("p",[n("code",[t._v("one thread == one call stack == one thing at a time")])]),t._v(" "),n("p",[t._v("单线程 == 一个回调栈 == 某个时间点只做一件事")]),t._v(" "),n("blockquote",[n("p",[t._v("so the call stack is basically ‑‑ it's a data structure which records basically where in the program we are, if we step into a function, we put something on to the stack, if we return from a function, we pop off the top of the stack that's all the stack can do")])]),t._v(" "),n("p",[t._v("调用栈是一个记录当前程序所在位置的数据结构，如果当前进入了某个函数，某个函数就会被放在栈里面。如果当前离开了某个函数，这个函数就会被弹出栈。")]),t._v(" "),n("p",[n("strong",[t._v("例1：")])]),t._v(" "),n("p",[n("img",{attrs:{src:s(429),alt:"调用栈"}})]),t._v(" "),n("p",[t._v("例子中的main函数指代运行的文件本身。")]),t._v(" "),n("p",[n("strong",[t._v("例2：")]),t._v(" "),n("img",{attrs:{src:s(430),alt:"报错-调用栈"}})]),t._v(" "),n("p",[t._v("右侧调试工具中报错信息把调用栈信息都展示出来了。")]),t._v(" "),n("h3",{attrs:{id:"阻塞-什么使程序变慢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#阻塞-什么使程序变慢"}},[t._v("#")]),t._v(" 阻塞——什么使程序变慢")]),t._v(" "),n("blockquote",[n("p",[t._v("Things which are slow and on that stack are what are blocking means")])]),t._v(" "),n("p",[t._v("在栈里表现很慢的东西都叫阻塞。")]),t._v(" "),n("p",[t._v("举例：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(431),alt:"阻塞"}})]),t._v(" "),n("p",[t._v("单线程语言运行多个阻塞任务的情况。前三行是三个HTTP请求，耗时较久（占用栈时间长），本例中为阻塞。\n后三行"),n("code",[t._v("console.log")]),t._v("运行需要等很久时间，等前三行的“阻塞”执行完毕。")]),t._v(" "),n("h3",{attrs:{id:"阻塞带来的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#阻塞带来的问题"}},[t._v("#")]),t._v(" 阻塞带来的问题")]),t._v(" "),n("p",[t._v("因为我们的JavaScript代码是运行在浏览器中的，“阻塞”会影响用户交互影响体验。")]),t._v(" "),n("p",[t._v("“阻塞”会导致浏览器无法响应（无法响应点击等事件、无法渲染）。直到栈中的“阻塞”执行完毕。")]),t._v(" "),n("h3",{attrs:{id:"解决阻塞的方法-异步回调"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解决阻塞的方法-异步回调"}},[t._v("#")]),t._v(" 解决阻塞的方法——异步回调")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hi'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'there'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'JSConfEU'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("让setTimeout中的匿名函数5秒钟后进入调用栈的就是事件循环。")]),t._v(" "),n("h2",{attrs:{id:"并发-事件循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#并发-事件循环"}},[t._v("#")]),t._v(" 并发&事件循环")]),t._v(" "),n("p",[n("img",{attrs:{src:s(372),alt:"浏览器包含内容"}})]),t._v(" "),n("p",[t._v("此图对于node开发来说基本相同，不同点是node.js中没有WebAPI，而有C++ API，并且C++对你隐藏了线程。")]),t._v(" "),n("h3",{attrs:{id:"事件循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),n("p",[t._v("JS中并发/异步的实现原理：遇到“阻塞”（DOM事件、网络请求），不会等着待其执行；而是将其挂起，等到“阻塞”返回结果，将其回调函数放入"),n("strong",[t._v("回调队列")]),t._v("中，当"),n("strong",[t._v("调用栈")]),t._v("中的所有任务都执行完毕，从回调队列头部取出一个回调函数执行。")]),t._v(" "),n("p",[t._v("例子：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(432),alt:"事件循环"}})]),t._v(" "),n("h2",{attrs:{id:"链接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("演讲文本"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.youtube.com/watch?v=8aGhZQkoFbQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("演讲视频"),n("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);