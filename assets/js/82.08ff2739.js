(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{559:function(t,a,s){"use strict";s.r(a);var n=s(56),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"样式布局相关面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#样式布局相关面试题"}},[t._v("#")]),t._v(" 样式布局相关面试题")]),t._v(" "),s("h2",{attrs:{id:"_1-如何实现一个自适应的正方形-正方形边长是屏幕宽度的10"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何实现一个自适应的正方形-正方形边长是屏幕宽度的10"}},[t._v("#")]),t._v(" 1. 如何实现一个自适应的正方形（正方形边长是屏幕宽度的10%）")]),t._v(" "),s("h3",{attrs:{id:"方法1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法1"}},[t._v("#")]),t._v(" 方法1")]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".square")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 10vw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 10vw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("缺点："),s("code",[t._v("vw")]),t._v("存在兼容性问题")]),t._v(" "),s("h3",{attrs:{id:"方法2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法2"}},[t._v("#")]),t._v(" 方法2")]),t._v(" "),s("p",[t._v("使用百分比内边距。")]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".square")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 10%"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("margin-bottom")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 10%"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"_2-flex-0-1-auto-的含义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-flex-0-1-auto-的含义"}},[t._v("#")]),t._v(" 2."),s("code",[t._v("flex: 0 1 auto; 的含义")])]),t._v(" "),s("p",[t._v("作用于"),s("code",[t._v("flex元素")]),t._v("的 Flex属性的简写形式。\n将三个属性的数值依次排列。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("flex: <flex-grow> [flex-shrink] [flex-basis]\n")])])]),s("p",[t._v("使用了"),s("code",[t._v("flexbox")]),t._v("布局的区域叫"),s("code",[t._v("flex容器")]),t._v("，flex容器内的直系元素是"),s("code",[t._v("flex元素")]),t._v("。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("flex-grow")]),t._v("，取值：[0, ∞]，默认为0，主轴方向剩余空间分配规则，和兄弟节点按此值的比例分配；")]),t._v(" "),s("li",[s("code",[t._v("flex-shrink")]),t._v("，取值：[0, ∞]，收缩比例，当同容器内的其他flex元素尺寸超过容器时生效，大的数值可以比小数值的同级元素收缩程度更大；")]),t._v(" "),s("li",[s("code",[t._v("flex-basis")]),t._v("，flex元素的宽度，如果容器内给定了宽度就是指定值，如果没有给定就是元素内容宽度。")])]),t._v(" "),s("h3",{attrs:{id:"答案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案"}},[t._v("#")]),t._v(" 答案")]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[t._v("flex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0 1 auto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("对应的含义就是：")]),t._v(" "),s("p",[t._v("在这里 flex-grow 的值为 0，所以 flex 元素不会超过它们 flex-basis 的尺寸。\nflex-shrink 的值为 1, 所以可以缩小 flex 元素来防止它们溢出。\nflex-basis 的值为 auto. Flex 元素尺寸可以是在主维度上设置的，也可以是根据内容自动得到的。")]),t._v(" "),s("h2",{attrs:{id:"_3-重绘和回流的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-重绘和回流的理解"}},[t._v("#")]),t._v(" 3.重绘和回流的理解")]),t._v(" "),s("p",[t._v("解答："),s("RouterLink",{attrs:{to:"/style/reflow-repaint.html"}},[t._v("reflow-repaint")])],1),t._v(" "),s("h2",{attrs:{id:"_4-css呼吸效果的动画"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-css呼吸效果的动画"}},[t._v("#")]),t._v(" 4.CSS呼吸效果的动画")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("animation-anme: OpacityBreath;")]),t._v(" // 关键帧设置的名称")]),t._v(" "),s("li",[s("code",[t._v("animation-duration: 2s;")]),t._v(" // 持续时间")]),t._v(" "),s("li",[s("code",[t._v("animation-timing-function: ease-in-out;")]),t._v(" // 设置动画速度，即通过建立加速度曲线，设置动画在关键帧之间是如何变化。")]),t._v(" "),s("li",[s("code",[t._v("animation-iteration-count: infinite;")]),t._v(" // 动画的重复次数。无限循环")])]),t._v(" "),s("div",{staticClass:"language-CSS extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("#target")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("animation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" OpacityBreath 2s ease-in-out infinite"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*     \n    // animation-anme: OpacityBreath; // 关键帧设置的名称\n    // animation-duration: 2s; // 持续时间\n    // animation-timing-function: ease-in-out; // 设置动画速度，即通过建立加速度曲线，设置动画在关键帧之间是如何变化。\n    // animation-iteration-count: infinite; // 动画的重复次数。无限循环 */")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("opacity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0.3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token atrule"}},[s("span",{pre:!0,attrs:{class:"token rule"}},[t._v("@keyframes")]),t._v(" OpacityBreath")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("0%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("opacity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0.3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("50%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("opacity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0.65"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("100%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("opacity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0.3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);