(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{403:function(a,t,s){a.exports=s.p+"assets/img/array-method-map.427a0c02.png"},509:function(a,t,s){"use strict";s.r(t);var e=s(56),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"常用数组方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用数组方法"}},[a._v("#")]),a._v(" 常用数组方法")]),a._v(" "),e("p",[e("img",{attrs:{src:s(403),alt:"数组方法"}})]),a._v(" "),e("h2",{attrs:{id:"增删"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#增删"}},[a._v("#")]),a._v(" 增删")]),a._v(" "),e("h3",{attrs:{id:"数组开头"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组开头"}},[a._v("#")]),a._v(" 数组开头")]),a._v(" "),e("ul",[e("li",[a._v("删除，"),e("code",[a._v("shift()")])]),a._v(" "),e("li",[a._v("添加，"),e("code",[a._v("unshift()")])])]),a._v(" "),e("h3",{attrs:{id:"数组末尾"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组末尾"}},[a._v("#")]),a._v(" 数组末尾")]),a._v(" "),e("ul",[e("li",[a._v("添加，"),e("code",[a._v("push()")])]),a._v(" "),e("li",[a._v("删除，"),e("code",[a._v("pop()")])])]),a._v(" "),e("p",[a._v("这4个方法均会"),e("strong",[a._v("改变原数组")])]),a._v(" "),e("h3",{attrs:{id:"指定位置增删"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指定位置增删"}},[a._v("#")]),a._v(" 指定位置增删")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("splice(start, deleteCount, item0, item1, /* …, */ itemN)")]),a._v(" "),e("ul",[e("li",[a._v("删除：下标为start的元素开始，删除deleteCount个（包含arr[start]）")]),a._v(" "),e("li",[a._v("插入：插入从第三个参数开始的后续参数，把arr[start]挤到插入元素之后")]),a._v(" "),e("li",[e("strong",[a._v("改变原数组")])])])])]),a._v(" "),e("h2",{attrs:{id:"查找"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查找"}},[a._v("#")]),a._v(" 查找")]),a._v(" "),e("h3",{attrs:{id:"返回元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#返回元素"}},[a._v("#")]),a._v(" 返回元素")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("find(callbackFn(ele, index, array){})")]),a._v(" "),e("ul",[e("li",[a._v("返回数组中满足测试函数的"),e("strong",[a._v("第一个值")]),a._v("，无匹配的返回"),e("code",[a._v("undefined")])])])])]),a._v(" "),e("h3",{attrs:{id:"返回索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#返回索引"}},[a._v("#")]),a._v(" 返回索引")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("findIndex(callbackFn(ele, index, array){})")])]),a._v(" "),e("li",[e("code",[a._v("indexOf(searchElement, fromIndex)")]),a._v(" "),e("ul",[e("li",[a._v("相同点，返回匹配的"),e("strong",[a._v("第一个元素")]),a._v("的索引，无匹配的返回"),e("code",[a._v("-1")])]),a._v(" "),e("li",[a._v("不同点，参数不同")])])])]),a._v(" "),e("h3",{attrs:{id:"返回true-false"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#返回true-false"}},[a._v("#")]),a._v(" 返回true/false")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("some(testFn(ele, index, array){})")]),a._v(" "),e("ul",[e("li",[a._v("有匹配测试函数的元素则返回true")])])]),a._v(" "),e("li",[e("code",[a._v("every(testFn(ele, index, array){})")]),a._v(" "),e("ul",[e("li",[a._v("是否所有的数组元素都能通过测试函数，是返回true")])])]),a._v(" "),e("li",[e("code",[a._v("includes(searchElement, fromIndex)")]),a._v(" "),e("ul",[e("li",[a._v("包含返回true，不包含返回false")])])])]),a._v(" "),e("h2",{attrs:{id:"过滤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#过滤"}},[a._v("#")]),a._v(" 过滤")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("filter(testFn(ele, index, array){})")]),a._v(" "),e("ul",[e("li",[a._v("返回新数组数，数组元素为满足测试函数的数组元素浅拷贝，"),e("strong",[a._v("不改变原数组")])])])]),a._v(" "),e("li",[e("code",[a._v("slice(start, end)")]),a._v(" "),e("ul",[e("li",[a._v("下标从start开始，到end结束，不包含end，如果没有end则到数组末尾。")]),a._v(" "),e("li",[a._v("返回的是"),e("strong",[a._v("浅拷贝")]),a._v("，"),e("strong",[a._v("不改变原数组")])])])])]),a._v(" "),e("h2",{attrs:{id:"迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#迭代"}},[a._v("#")]),a._v(" 迭代")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("forEach(callbackFn(ele, index, array){})")]),a._v(" "),e("ul",[e("li",[a._v("返回"),e("code",[a._v("undefined")]),a._v("，不可链式调用，"),e("strong",[a._v("修改原数组")])])])]),a._v(" "),e("li",[e("code",[a._v("map(callbackFn(ele, index, array){})")]),a._v(" "),e("ul",[e("li",[a._v("返回新数组，数组元素由回调函数返回值构成")])])]),a._v(" "),e("li",[e("code",[a._v("reduce(callbackFn(accumulator, currentValue, currentIndex, array){}, initialValue)")]),a._v(" "),e("ul",[e("li",[a._v("每次调用时，"),e("code",[a._v("callbackFn")]),a._v("的返回值都作为"),e("code",[a._v("accumulator")]),a._v("参数传递到下一次调用中，"),e("code",[a._v("accumulator")]),a._v("的最终值"),e("code",[a._v("reduce()")]),a._v("的返回值")])])])]),a._v(" "),e("h2",{attrs:{id:"排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[a._v("#")]),a._v(" 排序")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("sort(compareFn(a, b){})")]),a._v(" "),e("ul",[e("li",[a._v("不传参数，进行升序排序")]),a._v(" "),e("li",[a._v("比较函数"),e("code",[a._v("compareFn")]),a._v("的返回值是数字（正数为升序，负数为降序），不是布尔值")]),a._v(" "),e("li",[a._v("会改变原数组")])])]),a._v(" "),e("li",[e("code",[a._v("reverse()")]),a._v(" "),e("ul",[e("li",[a._v("反转数组，改变原数组")])])])]),a._v(" "),e("h2",{attrs:{id:"构造与转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造与转换"}},[a._v("#")]),a._v(" 构造与转换")]),a._v(" "),e("h2",{attrs:{id:"数组构造"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组构造"}},[a._v("#")]),a._v(" 数组构造")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("Array(arrayLength)")]),a._v(" "),e("ul",[e("li",[a._v("构造函数，用于创建数组"),e("code",[a._v("Array('apple', 'banana')")])]),a._v(" "),e("li",[a._v("初始化一个两行三列的二维数组："),e("code",[a._v("new Array(2).fill(0).map(() => new Array(3).fill(0))")])])])]),a._v(" "),e("li",[e("code",[a._v("Array.from()")]),a._v(" "),e("ul",[e("li",[a._v("是个静态方法（其他的方法一般是prototype上的）。创建一个从数字N开始，长度为L的连续递增数组"),e("code",[a._v("Array.from({length: L}, (value, index) => index + N)")])]),a._v(" "),e("li",[a._v("从Map创建数组")])]),a._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" map "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"a"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"2"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"b"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" arr1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Array"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("from")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("keys")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ['1', '2']")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" arr2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Array"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("from")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("values")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ['a', 'b']")]),a._v("\n")])])])]),a._v(" "),e("li",[e("code",[a._v("fill(value, start, end)")]),a._v(" "),e("ul",[e("li",[a._v("使用value填入索引从start到end的元素，如果end>length - 1，则到数组末尾截止不会继续添加（不会改变数组长度）")]),a._v(" "),e("li",[a._v("会修改原数组")])])]),a._v(" "),e("li",[e("code",[a._v("concat(value0, value1, ..., valueN)")]),a._v(" "),e("ul",[e("li",[a._v("不改变原数组，返回新数组，元素是拷贝")]),a._v(" "),e("li",[a._v("参数可以是数组也可以是普通字面量")])])])]),a._v(" "),e("h3",{attrs:{id:"字符串与数组转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串与数组转换"}},[a._v("#")]),a._v(" 字符串与数组转换")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("join(separator)")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("separator")]),a._v("默认值为逗号“,”，不传此参数取值")]),a._v(" "),e("li",[a._v("想要将数组转换为所有元素拼接"),e("code",[a._v("arr.join('')")])])])]),a._v(" "),e("li",[e("code",[a._v("String.prototype.split(separator, limit)")]),a._v(" "),e("ul",[e("li",[a._v("在字符串中每个"),e("code",[a._v("separator")]),a._v("处进行分隔，分隔得到的每个字符串作为数组元素，全部放入数组，并返回数组")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);