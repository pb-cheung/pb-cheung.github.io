(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{441:function(t,s,a){t.exports=a.p+"assets/img/nodejs-eventloop-micro.8a6f428e.png"},442:function(t,s,a){t.exports=a.p+"assets/img/nodejs-eventloop-macro.ec15a857.png"},552:function(t,s,a){"use strict";a.r(s);var n=a(56),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"事件循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),n("h2",{attrs:{id:"作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),n("h3",{attrs:{id:"事件循环机制解决了什么问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件循环机制解决了什么问题"}},[t._v("#")]),t._v(" 事件循环机制解决了什么问题？")]),t._v(" "),n("p",[t._v("它是nodejs中异步的实现方式，它决定异步API的回调函数什么时候回到主线程中执行。")]),t._v(" "),n("blockquote",[n("p",[t._v("Nodejs是异步I/O模型（不阻塞等待I/O操作完成，而是继续执行其他指令，I/O操作完成通知CPU结果继续处理）。同步操作在主线程中执行，异步API在底层的C++维护的线程中执行。在JavaScript运行时，众多异步API回调函数什么时候回到主线程中调用呢，这就是时间循环机制做的事情。")])]),t._v(" "),n("h2",{attrs:{id:"nodejs事件循环完整过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nodejs事件循环完整过程"}},[t._v("#")]),t._v(" nodejs事件循环完整过程：")]),t._v(" "),n("ol",[n("li",[t._v("执行同步代码，遇到异步代码异步API将其回调函数放入对应的队列；")]),t._v(" "),n("li",[t._v("同步代码执行完成，执行微任务队列的回调函数；")]),t._v(" "),n("li",[t._v("微任务执行完成，从Timers阶段开始执行宏任务，"),n("s",[t._v("执行完当前阶段队列中的所有宏任务回调函数后执行微任务")]),t._v("，执行完一个宏任务再检查微任务队列执行微任务；")]),t._v(" "),n("li",[t._v("微任务执行完成，进入下一个阶段的宏任务，执行任务队列内的一个宏任务，再去执行微任务，循环往复走完6个阶段；")])]),t._v(" "),n("p",[t._v("删除线内容说明，删除部分为node10之前的事件循环实现，node11开始事件循环和浏览器更为接近。")]),t._v(" "),n("h2",{attrs:{id:"宏任务和微任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#宏任务和微任务"}},[t._v("#")]),t._v(" 宏任务和微任务")]),t._v(" "),n("p",[t._v("异步操作分为宏任务和微任务，宏任务的回调函数放在宏任务队列中，微任务的回调函数放在微任务队列中。")]),t._v(" "),n("ul",[n("li",[t._v("宏任务（macro task）分为6个阶段（6个队列），下文详细内容；")]),t._v(" "),n("li",[t._v("微任务（micro task）包括："),n("code",[t._v("process.nextTick")]),t._v("、"),n("code",[t._v("promise")]),t._v("相关的几个；")]),t._v(" "),n("li",[t._v("微任务执行优先级高于宏任务；")]),t._v(" "),n("li",[t._v("宏任务之间没有优先级，执行顺序按照队列和事件循环的阶段；")]),t._v(" "),n("li",[n("s",[t._v("微任务中"),n("code",[t._v("process.nextTick")]),t._v("优先级高于其他微任务，其他任务按队列顺序执行")])])]),t._v(" "),n("p",[t._v("微任务执行：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(441),alt:"micro task"}})]),t._v(" "),n("h2",{attrs:{id:"宏任务的6个阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#宏任务的6个阶段"}},[t._v("#")]),t._v(" 宏任务的6个阶段")]),t._v(" "),n("ol",[n("li",[t._v("Timers：存储执行定时器"),n("code",[t._v("setTimeout")]),t._v(","),n("code",[t._v("setInterval")]),t._v("的回调函数队列；")]),t._v(" "),n("li",[t._v("Pending Callbacks：存储执行与操作系统有关的回调函数。比如启动服务器端应用时监听端口回调函数；")]),t._v(" "),n("li",[t._v("Idle，prepare：系统内部使用；（不需要关注）")]),t._v(" "),n("li",[t._v("IO Poll：存储执行IO操作的回调函数队列；例如文件读写、数据库操作的回调函数")]),t._v(" "),n("li",[t._v("Check：存储执行"),n("code",[t._v("setImmediate")]),t._v("的回调函数；")]),t._v(" "),n("li",[t._v("Close Callbacks：存储执行与关闭事件的回调函数；例如数据库关闭、socket连接关闭等的回调函数。")])]),t._v(" "),n("p",[t._v("每个阶段执行前都会检查微任务队列是否为空，不为空，则先执行微任务队列中的回调函数。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(442),alt:"maro task"}})]),t._v(" "),n("h2",{attrs:{id:"常见问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[t._v("#")]),t._v(" 常见问题")]),t._v(" "),n("p",[t._v("例1：")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setImmediate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印 2 1或者 1 2，没有确切的先后顺序")]),t._v("\n")])])]),n("p",[t._v("解释：")]),t._v(" "),n("p",[n("code",[t._v("setTimeout(,0)")]),t._v("nodejs中会被转成"),n("code",[t._v("setTimeout(,1)")]),t._v("，回调函数加入timer队列的时间间隔最小是1ms。")]),t._v(" "),n("ul",[n("li",[t._v("2 1的情况：如果系统进入时间循环的时间点还不到1ms，那么Timers阶段队列中还没有回调函数，顺延到Check Callbacks阶段队列中的回调函数就被执行，打印2，下一圈循环到Timers队列，setTimeout的回调函数才执行打印1。")]),t._v(" "),n("li",[t._v("1 2的情况：如果系统进入时间循环的时间点还超过了1ms，那么Timers阶段队列中的回调函数执行打印1，顺延到Check Callbacks阶段队列中的回调函数就被执行，打印2。")])]),t._v(" "),n("p",[t._v("例2：")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nfs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test.js'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setImmediate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 确切的输出：2 1")]),t._v("\n")])])]),n("p",[t._v("解释：")]),t._v(" "),n("p",[t._v("readFile回调函数会被放在IO Poll阶段的队列，下个阶段是Check，执行setImmediate对应的回调函数，打印2，事件循环进入下一圈，进入到Timer阶段，setTimeout的回调函数执行，打印1。")]),t._v(" "),n("h2",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),n("p",[t._v("https://drive.google.com/file/d/0B1ENiZwmJ_J2a09DUmZROV9oSGc/view?resourcekey=0-lR-GaBV1Bmjy086Fp3J4Uw")])])}),[],!1,null,null,null);s.default=e.exports}}]);